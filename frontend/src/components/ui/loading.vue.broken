<template>
  <div
    :class="cn(loadingVariants({ size, variant }), $attrs.class as string)"
    v-bind="$attrs"
  >
    <!-- 旋转加载器 -->
    <div
      v-if="variant === 'spinner'"
      :class="cn('animate-spin rounded-full border-2 border-current border-t-transparent', sizeSpinnerMap[size])"
    />

    <!-- 点状加载器 -->
    <div
      v-else-if="variant === 'dots'"
      class="flex space-x-1"
    >
      <div
        v-for="i in 3"
        :key="i"
        :class="cn('rounded-full bg-current animate-bounce', sizeDotMap[size])"
        :style="{ animationDelay: `${(i - 1) * 0.1}s` }"
      />
    </div>

    <!-- 脉冲加载器 -->
    <div
      v-else-if="variant === 'pulse'"
      :class="cn('rounded-full bg-current animate-pulse', sizePulseMap[size])"
    />

    <!-- 条形加载器 -->
    <div
      v-else-if="variant === 'bars'"
      class="flex items-end space-x-1"
    >
      <div
        v-for="i in 4"
        :key="i"
        :class="cn('bg-current animate-bounce', sizeBarMap[size])"
        :style="{ animationDelay: `${(i - 1) * 0.1}s` }"
      />
    </div>

    <!-- 波浪加载器 -->
    <div
      v-else-if="variant === 'wave'"
      class="flex items-center space-x-1"
    >
      <div
        v-for="i in 5"
        :key="i"
        :class="cn('bg-current rounded-full animate-bounce', sizeWaveMap[size])"
        :style="{ animationDelay: `${(i - 1) * 0.05}s` }"
      />
    </div>

    <!-- 加载文本 */
    <span
      v-if="text && showText"
      :class="cn('ml-3 text-current', sizeTextMap[size])"
    >
      {{ text }}
    </span>
  </div>
</template>

<script setup lang="ts">
import { cva, type VariantProps } from 'class-variance-authority'
import { cn } from '@/lib/utils'

// 加载组件变体配置
const loadingVariants = cva(
  'inline-flex items-center justify-center text-muted-foreground',
  {
    variants: {
      size: {
        xs: '',
        sm: '',
        default: '',
        lg: '',
        xl: '',
      },
      variant: {
        spinner: '',
        dots: '',
        pulse: '',
        bars: '',
        wave: '',
      },
    },
    defaultVariants: {
      size: 'default',
      variant: 'spinner',
    },
  }
)

// 尺寸映射
const sizeSpinnerMap = {
  xs: 'h-3 w-3',
  sm: 'h-4 w-4',
  default: 'h-6 w-6',
  lg: 'h-8 w-8',
  xl: 'h-10 w-10',
}

const sizeDotMap = {
  xs: 'h-1 w-1',
  sm: 'h-1.5 w-1.5',
  default: 'h-2 w-2',
  lg: 'h-2.5 w-2.5',
  xl: 'h-3 w-3',
}

const sizePulseMap = {
  xs: 'h-2 w-2',
  sm: 'h-3 w-3',
  default: 'h-4 w-4',
  lg: 'h-5 w-5',
  xl: 'h-6 w-6',
}

const sizeBarMap = {
  xs: 'h-2 w-0.5',
  sm: 'h-3 w-0.5',
  default: 'h-4 w-1',
  lg: 'h-5 w-1',
  xl: 'h-6 w-1.5',
}

const sizeWaveMap = {
  xs: 'h-1 w-1',
  sm: 'h-1.5 w-1.5',
  default: 'h-2 w-2',
  lg: 'h-2.5 w-2.5',
  xl: 'h-3 w-3',
}

const sizeTextMap = {
  xs: 'text-xs',
  sm: 'text-sm',
  default: 'text-base',
  lg: 'text-lg',
  xl: 'text-xl',
}

export interface LoadingProps extends VariantProps<typeof loadingVariants> {
  text?: string
  showText?: boolean
}

// 组件属性
const props = withDefaults(defineProps<LoadingProps>(), {
  size: 'default',
  variant: 'spinner',
  showText: true,
  text: '加载中...'
})

// 禁用继承的 class 属性
defineOptions({
  inheritAttrs: false
})
</script>

<style scoped>
/* 自定义动画 */
@keyframes bounce {
  0%, 80%, 100% {
    transform: scale(0);
  }
  40% {
    transform: scale(1);
  }
}

@keyframes wave {
  0%, 60%, 100% {
    transform: initial;
  }
  30% {
    transform: translateY(-15px);
  }
}

.animate-bounce {
  animation: bounce 1.4s infinite ease-in-out both;
}

.animate-wave {
  animation: wave 1.2s infinite ease-in-out;
}

/* 针对条形加载器的特殊动画 */
.bars .animate-bounce {
  animation: bounce-vertical 1.2s infinite ease-in-out;
}

@keyframes bounce-vertical {
  0%, 80%, 100% {
    transform: scaleY(0.5);
  }
  40% {
    transform: scaleY(1);
  }
}
</style>